schema {
  query: Query
}

type Query {
    # Product
    MockDataProduct(
        numberOfItems: Int! @doc(description: "Number of products to generate. Accepts values between 1 and 1000.")
    ): MockDataProductResults
    @resolver(class: "SMG\\MockDataGenerator\\Model\\Resolver\\MockData")
    @doc(description: "Generates and returns a list of fake product records.")

    # Order
    MockDataOrder(
        numberOfItems: Int! @doc(description: "Number of orders to generate. Accepts values between 1 and 1000.")
    ): MockDataOrderResults
    @resolver(class: "SMG\\MockDataGenerator\\Model\\Resolver\\MockData")
    @doc(description: "Generates and returns a list of fake order records.")

    # Customer
    MockDataCustomer(
        numberOfItems: Int! @doc(description: "Number of customers to generate. Accepts values between 1 and 1000.")
    ): MockDataCustomerResults
    @resolver(class: "SMG\\MockDataGenerator\\Model\\Resolver\\MockData")
    @doc(description: "Generates and returns a list of fake customer records.")
}

"""
A collection of generated product data.
"""
type MockDataProductResults {
    total_count: Int @doc(description: "Total number of generated products.")
    items: [MockDataProductItem] @doc(description: "List of generated product items.")
}

"""
Represents a single generated product item.
"""
type MockDataProductItem {
    entity_id: Int @doc(description: "Unique product ID.")
    sku: String @doc(description: "Product SKU code.")
    name: String @doc(description: "Product name.")
    price: Float @doc(description: "Product price.")
    status: Int @doc(description: "Product status (e.g. enabled/disabled).")
    visibility: Int @doc(description: "Product visibility scope.")
    type_id: String @doc(description: "Magento product type (e.g. simple, configurable).")
    created_at: String @doc(description: "Creation timestamp.")
    updated_at: String @doc(description: "Last update timestamp.")
    weight: Float @doc(description: "Product weight.")
}

"""
A collection of generated order data.
"""
type MockDataOrderResults {
    total_count: Int @doc(description: "Total number of generated orders.")
    items: [MockDataOrderItem] @doc(description: "List of generated order records.")
}

"""
A collection of generated customer data.
"""
type MockDataCustomerResults {
    total_count: Int @doc(description: "Total number of generated customers.")
    items: [MockDataCustomerItem] @doc(description: "List of generated customer records.")
}

"""
Represents a single generated customer.
"""
type MockDataCustomerItem {
    id: Int @doc(description: "Unique customer ID.")
    group_id: Int @doc(description: "Customer group ID.")
    default_billing: Int @doc(description: "Default billing address ID.")
    default_shipping: Int @doc(description: "Default shipping address ID.")
    created_at: String @doc(description: "Customer account creation timestamp.")
    updated_at: String @doc(description: "Last update timestamp.")
    created_in: String @doc(description: "Store in which the customer was created.")
    email: String @doc(description: "Customer email address.")
    firstname: String @doc(description: "Customer first name.")
    lastname: String @doc(description: "Customer last name.")
    store_id: Int @doc(description: "Associated store ID.")
    website_id: Int @doc(description: "Associated website ID.")
    disable_auto_group_change: Int @doc(description: "Flag to disable automatic group change.")
    addresses: [MockDataCustomerAddress] @doc(description: "List of customer addresses.")
    testAddress: [String] @doc(description: "Mock field for testing address data.")
}

"""
Represents a customer address.
"""
type MockDataCustomerAddress {
    id: Int @doc(description: "Address ID.")
    customer_id: Int @doc(description: "Associated customer ID.")
    country_id: String @doc(description: "Country code (ISO format).")
    telephone: String @doc(description: "Phone number.")
    postcode: String @doc(description: "Postal code.")
    street: [String] @doc(description: "Street address lines.")
    region: [String] @doc(description: "Region or state.")
    city: String @doc(description: "City name.")
    default_shipping: Boolean @doc(description: "Indicates if this is the default shipping address.")
    default_billing: Boolean @doc(description: "Indicates if this is the default billing address.")
}

"""
Represents a generated order.
"""
type MockDataOrderItem {
  entity_id: Int @doc(description: "Order ID.")
  increment_id: String @doc(description: "Unique order increment ID.")
  state: String @doc(description: "Order state (e.g. new, complete).")
  status: String @doc(description: "Order status.")
  grand_total: Float @doc(description: "Final order total.")
  base_grand_total: Float @doc(description: "Final order total in base currency.")
  subtotal: Float @doc(description: "Order subtotal.")
  base_subtotal: Float @doc(description: "Order subtotal in base currency.")
  discount_amount: Float @doc(description: "Discount amount applied to order.")
  tax_amount: Float @doc(description: "Tax amount applied to order.")
  shipping_amount: Float @doc(description: "Shipping amount applied to order.")
  order_currency_code: String @doc(description: "Currency code for the order.")
  base_currency_code: String @doc(description: "Base currency code.")
  customer_id: Int @doc(description: "Associated customer ID.")
  customer_email: String @doc(description: "Customer email address.")
  customer_firstname: String @doc(description: "Customer first name.")
  customer_lastname: String @doc(description: "Customer last name.")
  customer_is_guest: Boolean @doc(description: "Indicates if the order was placed as guest.")
  created_at: String @doc(description: "Order creation timestamp.")
  updated_at: String @doc(description: "Order last update timestamp.")
  total_item_count: Int @doc(description: "Total number of items in order.")

  items: [OrderItem] @doc(description: "List of items included in the order.")
  billing_address: OrderAddress @doc(description: "Billing address for the order.")
  payment: OrderPayment @doc(description: "Payment method details for the order.")
  status_histories: [OrderStatusHistory] @doc(description: "History of status changes for the order.")
}

"""
Represents an item within an order.
"""
type OrderItem {
  item_id: Int @doc(description: "Order item ID.")
  sku: String @doc(description: "Product SKU.")
  name: String @doc(description: "Product name.")
  product_id: Int @doc(description: "Associated product ID.")
  qty_ordered: Int @doc(description: "Quantity ordered.")
  price: Float @doc(description: "Price per unit.")
  base_price: Float @doc(description: "Base currency price per unit.")
  row_total: Float @doc(description: "Total price for item row.")
  base_row_total: Float @doc(description: "Total price in base currency.")
  tax_amount: Float @doc(description: "Tax amount applied to item.")
  base_tax_amount: Float @doc(description: "Tax amount in base currency.")
  price_incl_tax: Float @doc(description: "Price including tax.")
  base_price_incl_tax: Float @doc(description: "Base price including tax.")
  row_total_incl_tax: Float @doc(description: "Row total including tax.")
  base_row_total_incl_tax: Float @doc(description: "Row total including tax in base currency.")
}

"""
Represents a billing or shipping address on an order.
"""
type OrderAddress {
  firstname: String @doc(description: "First name.")
  lastname: String @doc(description: "Last name.")
  street: [String] @doc(description: "Street address lines.")
  city: String @doc(description: "City name.")
  region: String @doc(description: "Region or state name.")
  region_code: String @doc(description: "Region or state code.")
  postcode: String @doc(description: "Postal code.")
  country_id: String @doc(description: "Country code (ISO format).")
  telephone: String @doc(description: "Phone number.")
  email: String @doc(description: "Email address.")
}

"""
Represents payment details for an order.
"""
type OrderPayment {
  method: String @doc(description: "Payment method code.")
  amount_paid: Float @doc(description: "Amount paid by customer.")
  amount_ordered: Float @doc(description: "Total amount ordered.")
}

"""
Represents the history of order status changes.
"""
type OrderStatusHistory {
  comment: String @doc(description: "Comment about status change.")
  created_at: String @doc(description: "Timestamp of status update.")
  status: String @doc(description: "Order status at this time.")
}
